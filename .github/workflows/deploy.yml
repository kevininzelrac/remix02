name: AWS Build and Deploy
on:
  push:
    branches:
      - dev
env:
  AWS_REGION: "us-east-1"
  LAMBDA_FUNCTION_NAME: "inzelrac03"
  CLOUDFRONT_DISTRIBUTION_ID: "E3BG9URNI98XSL"

jobs:
  Build-Deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checking out code
        uses: actions/checkout@v3

      - name: Installing Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Installing dependencies
        run: npm install --production

      - name: Building project
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to S3 bucket
        run: aws s3 sync ./public/ s3://inzelrac03 --delete

      - name: Deploy backend to Lambda
        run: |
          zip -r function.zip build node_modules server.js tsconfig.json
          aws lambda update-function-code --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --zip-file fileb://function.zip --publish

      - name: Wait for Lambda function update to complete
        run: sleep 30

      - name: Create new Lambda function version
        id: create_lambda_version
        run: |
          aws lambda publish-version --function-name ${{ env.LAMBDA_FUNCTION_NAME }}
          echo "::set-output name=lambda_version::$(aws lambda list-versions-by-function --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --query 'Versions[-1].[Version]' --output text)"

      - name: Get CloudFront distribution configuration
        id: get_cloudfront_config
        run: |
          aws cloudfront get-distribution-config --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} > cloudfront_config.json
          echo "::set-output name=config_file::cloudfront_config.json"

      - name: Update CloudFront configuration with new Lambda version
        id: update_cloudfront_config
        run: |
          lambda_version=${{ steps.create_lambda_version.outputs.lambda_version }}
          jq --arg version "$lambda_version" '.DistributionConfig.CallerReference = "update-config" | .DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items[0].LambdaFunctionARN = (.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items[0].LambdaFunctionARN | sub(":version"; ":$version"))' ${{ steps.get_cloudfront_config.outputs.config_file }} > updated_config.json
          aws cloudfront update-distribution --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --if-match $(jq -r .ETag ${{ steps.get_cloudfront_config.outputs.config_file }}) --distribution-config file://updated_config.json
